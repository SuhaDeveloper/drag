import {
  Component,
  OnInit,
  AfterViewInit,
  ViewChild,
  ElementRef,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import * as d3 from 'd3';

@Component({
  selector: 'app-seat-arrangement',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './seat-arrangement.component.html',
  styleUrls: ['./seat-arrangement.component.css'],
})
export class SeatArrangementComponent implements OnInit {
  @ViewChild('svgContainer', { static: true })
  svgContainer!: ElementRef;

  curveAmount: number = 20;
  spacingFactor: number = 1;
  rotationAngle: number = 0;
  scaleValue: number = 1;

  blocksData = [
    { blockName: "Block A", rows: 5, columns: 6, scale: 0.7 },
    { blockName: "Block B", rows: 4, columns: 8, scale: 0.7 },
    { blockName: "Block C", rows: 6, columns: 5, scale: 0.7 }
  ];

  private svg: any;
  private seatRadius: number = 10;
  private rowSpacing: number = 25;
  private blockSpacing: number = 200;
  private initialX: number = 100;
  private initialY: number = 100;
  private seatSpacingBase: number = 40;

  selectedBlockIndex: number = 0 ;

  constructor() { }

  ngOnInit(): void {
    this.svg = d3.select(this.svgContainer.nativeElement)
                .attr('width', 800)
                .attr('height', 600);
    
    this.createBlocksAndSeats();
    this.updateVisualization();
  }

  private calculateCurvedPositions(rowIndex: number, curveAmount: number, spacingFactor: number, numSeatsPerRow: number) {
    const positions = [];
    const seatSpacing = this.seatSpacingBase * spacingFactor;
    const cy = rowIndex * this.rowSpacing;

    for (let i = 0; i < numSeatsPerRow; i++) {
      const x = i * seatSpacing;
      const y = cy + Math.sin((i / (numSeatsPerRow - 1)) * Math.PI) * curveAmount;
      positions.push({ x, y });
    }
    return positions;
  }

  private createBlocksAndSeats() {
    const that = this; // Capture component context

    this.blocksData.forEach((block, blockIndex) => {
      const blockGroup = this.svg.append('g')
                          .attr('class', 'block')
                          .attr('id', `block-${blockIndex}`)
                          .attr('transform', `translate(${this.initialX + blockIndex * this.blockSpacing},${this.initialY}) scale(${block.scale})`)
                          .on('click', function() {
                            that.selectBlock(blockIndex);
                          })
                          .call(d3.drag()
                                  .on('start', function() { d3.select(this).raise().classed('active', true); })
                                  .on('drag', function(event, d) {
                                    const transform = d3.select(this).attr('transform');
                                    const translate = transform.match(/translate\(([^)]+)\)/);
                                    const translateValues = translate ? translate[1].split(',').map(Number) : [0, 0];
                                    const newX = event.dx + translateValues[0];
                                    const newY = event.dy + translateValues[1];
                                    const scale = that.blocksData[blockIndex].scale;
                                    d3.select(this).attr('transform', `translate(${newX}, ${newY}) rotate(${that.rotationAngle}) scale(${scale})`);
                                  })
                                  .on('end', function() { d3.select(this).classed('active', false); })
                          );

      for (let rowIndex = 0; rowIndex < block.rows; rowIndex++) {
        const rowPositions = this.calculateCurvedPositions(rowIndex, this.curveAmount, this.spacingFactor, block.columns);

        blockGroup.selectAll(`circle.row-${rowIndex}`)
          .data(rowPositions)
          .enter()
          .append('circle')
          .attr('cx', (d:any) => d.x)
          .attr('cy', (d:any) => d.y)
          .attr('r', this.seatRadius)
          .attr('fill', 'steelblue')
          .attr('stroke', 'black')
          .attr('stroke-width', 1)
          .attr('class', `row-${rowIndex}`);
      }
    });
  }

  private selectBlock(blockIndex: number) {
    this.selectedBlockIndex = blockIndex;
    d3.selectAll('.block circle').classed('selected', false);
    d3.selectAll(`#block-${blockIndex} circle`).classed('selected', true);
  }

  updateVisualization() {
    if (this.selectedBlockIndex === null) {
      return; // No block selected, exit early
    }

    const block = this.blocksData[this.selectedBlockIndex];
    const blockGroup = d3.select(`#block-${this.selectedBlockIndex}`);

    for (let rowIndex = 0; rowIndex < block.rows; rowIndex++) {
      const rowPositions = this.calculateCurvedPositions(rowIndex, this.curveAmount, this.spacingFactor, block.columns);

      blockGroup.selectAll(`circle.row-${rowIndex}`)
        .data(rowPositions)
        .attr('cx', d => d.x)
        .attr('cy', d => d.y);
    }

    const transform = blockGroup.attr('transform');
    const translate = transform.match(/translate\(([^)]+)\)/)?.[1];
    blockGroup.attr('transform', `translate(${translate}) rotate(${this.rotationAngle}) scale(${block.scale})`);
  }

  updateScale() {
    if (this.selectedBlockIndex === null) {
      return; // No block selected, exit early
    }

    const newScale = this.scaleValue;
    const block = this.blocksData[this.selectedBlockIndex];

    if (block.scale !== newScale) {
      block.scale = newScale;
      this.updateVisualization();
    }
  }
}



--*--




<!-- curved-seats.component.html -->
<div>
    <label id="curveAmountLabel" for="curveAmountInput">Curve Amount:</label>
    <input type="number" id="curveAmountInput" min="0" max="100" [(ngModel)]="curveAmount" (input)="updateVisualization()"><br>
    <label id="spacingLabel" for="spacingInput">Spacing Factor:</label>
    <input type="number" id="spacingInput" min="1" max="5" step="0.1" [(ngModel)]="spacingFactor" (input)="updateVisualization()"><br>
    <label id="rotationLabel" for="rotationInput">Rotation Angle (degrees):</label>
    <input type="number" id="rotationInput" min="0" max="360" [(ngModel)]="rotationAngle" (input)="updateVisualization()"><br>
    <label id="scaleLabel" for="scaleInput">Scale Factor:</label>
    <input type="number" id="scaleInput" min="0.1" max="2" step="0.1" [(ngModel)]="scaleValue" (input)="updateScale()"><br>
    <button (click)="updateScale()">Update Scale</button> <!-- Button to update scale -->
</div>
<svg width="800" height="600" #svgContainer></svg>
